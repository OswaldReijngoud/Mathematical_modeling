% 本文件是直接使用自定义的Hungarian函数(见Hungarian.m)求解的示例，是指派问题的专用高效算法。
% 
% 支持非方阵（人员数≠任务数）和禁止分配（成本为Inf）的场景
% 无论是非方阵还是含禁止分配的场景，仅需修改输入的成本矩阵C，具体规则：
% 非方阵：直接输入m×n矩阵（m≠n），行数为人员数，列数为任务数。
% 禁止分配：在不可行的C(i,j)位置填入Inf（表示该分配不允许）。



%求最小成本举例
clear all
C=[2 15 13 4;10 4 14 15;9 14 16 13;7 8 11 9];%代码迁移时只需修改此处
[Matching,Cost]=Hungarian (C);
disp('最优解矩阵为:');%输出指派方案和最优值
Matching
disp('最优解为:');
Cost
% 输出解释
% Matching =
%      0     0     0     1  % 第1人 → 第4任务
%      0     1     0     0  % 第2人 → 第2任务
%      1     0     0     0  % 第3人 → 第1任务
%      0     0     1     0  % 第4人 → 第3任务
% Cost = 28

%%


%求最大利润举例
clear all
% 1. 输入利润矩阵（目标：最大化总利润）
P = [5 8 6 7;    % 甲在各区域的利润
     7 9 5 8;    % 乙在各区域的利润
     6 7 4 5;    % 丙在各区域的利润
     8 6 7 9];   % 丁在各区域的利润

% 2. 转换为成本矩阵（最大化→最小化）
P_max = max(P(:));  % 找到最大利润值（此处为9）
C = P_max - P;      % 构造成本矩阵

% 3. 调用匈牙利算法求解
[Matching, MinCost] = Hungarian(C);

% 4. 计算最大总利润（n×P_max - 最小总成本）
n = size(P,1);
MaxProfit = n * P_max - MinCost;

% 输出结果
disp('最优分配矩阵为:');
Matching
disp('最大总利润为（万元）:');
MaxProfit


% 输出解释
% Matching =
%      0     0     1     0  % 甲的分配：第3列=1 → 甲负责C区域
%      0     1     0     0  % 乙的分配：第2列=1 → 乙负责B区域
%      1     0     0     0  % 丙的分配：第1列=1 → 丙负责A区域
%      0     0     0     1  % 丁的分配：第4列=1 → 丁负责D区域
% MaxProfit = 30  % 单位：万元